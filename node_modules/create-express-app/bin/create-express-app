#!/usr/bin/env node
'use strict'
// vim: set ft=javascript:ts=2:sw=2
const program = require('commander')
const { parse } = require('comma-separated-tokens')
const pkg = require('../package.json')
const createExpressApp = require('../')

let directory

program
  .version(pkg.version)
  .arguments('<directory>')
  .action((dir) => directory = dir)
  .option('--extended', 'Show extended option prompts (ex. browser, engines, etc)')
  .option('--no-prompt', 'Skip prompts and just use input options')
  .option('--force', 'Force overwrite files')
  .option('--name [name]', 'The package name')
  .option('--app-type [type]', 'The app type, determines template and defaults')
  .option('--body-parser', 'Install and use the body-parser package')
  .option('--consolidate', 'Install and use the consolidate package')
  .option('--cookie-parser', 'Install and use the cookie-parser package')
  .option('--serve-static', 'Install and use the serve-static package')
  .option('--dependencies [dependencies]', 'Package dependencies')
  .option('--dev-dependencies [dependencies]', 'Package dev dependencies')
  .option('--main [main]', 'The app main entry script')
  .parse(process.argv)

if (program.dependencies) {
  program.dependencies = parse(program.dependencies)
}
if (program.devDependencies) {
  program.devDependencies = parse(program.devDependencies)
}

// Run the process
createExpressApp({
  directory: directory,
  extended: program.extended,
  noPrompt: program.noPrompt,
  force: program.force,
  // check if string because there is a .name getter function, same with description
  name: typeof program.name === 'string' ? program.name : undefined,
  appType: program.appType,
  bodyParser: program.bodyParser,
  consolidate: program.consolidate,
  cookieParser: program.cookieParser,
  serveStatic: program.serveStatic,
  dependencies: program.dependencies,
  devDependencies: program.devDependencies,
  main: program.main
})
